// Code generated by MockGen. DO NOT EDIT.
// Source: ./classer.go

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	biz "class/internal/biz"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClassCrawler is a mock of ClassCrawler interface.
type MockClassCrawler struct {
	ctrl     *gomock.Controller
	recorder *MockClassCrawlerMockRecorder
}

// MockClassCrawlerMockRecorder is the mock recorder for MockClassCrawler.
type MockClassCrawlerMockRecorder struct {
	mock *MockClassCrawler
}

// NewMockClassCrawler creates a new mock instance.
func NewMockClassCrawler(ctrl *gomock.Controller) *MockClassCrawler {
	mock := &MockClassCrawler{ctrl: ctrl}
	mock.recorder = &MockClassCrawlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassCrawler) EXPECT() *MockClassCrawlerMockRecorder {
	return m.recorder
}

// GetClassInfos mocks base method.
func (m *MockClassCrawler) GetClassInfos(ctx context.Context, cookie, xnm, xqm string) ([]*biz.ClassInfo, []*biz.StudentCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassInfos", ctx, cookie, xnm, xqm)
	ret0, _ := ret[0].([]*biz.ClassInfo)
	ret1, _ := ret[1].([]*biz.StudentCourse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClassInfos indicates an expected call of GetClassInfos.
func (mr *MockClassCrawlerMockRecorder) GetClassInfos(ctx, cookie, xnm, xqm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassInfos", reflect.TypeOf((*MockClassCrawler)(nil).GetClassInfos), ctx, cookie, xnm, xqm)
}
