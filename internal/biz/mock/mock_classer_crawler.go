// Code generated by MockGen. DO NOT EDIT.
// Source: ./classer.go

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	reflect "reflect"

	model "github.com/asynccnu/Muxi_ClassList/internal/biz/model"
	gomock "github.com/golang/mock/gomock"
)

// MockClassCrawler is a mock of ClassCrawler interface.
type MockClassCrawler struct {
	ctrl     *gomock.Controller
	recorder *MockClassCrawlerMockRecorder
}

// MockClassCrawlerMockRecorder is the mock recorder for MockClassCrawler.
type MockClassCrawlerMockRecorder struct {
	mock *MockClassCrawler
}

// NewMockClassCrawler creates a new mock instance.
func NewMockClassCrawler(ctrl *gomock.Controller) *MockClassCrawler {
	mock := &MockClassCrawler{ctrl: ctrl}
	mock.recorder = &MockClassCrawlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassCrawler) EXPECT() *MockClassCrawlerMockRecorder {
	return m.recorder
}

// GetClassInfoForGraduateStudent mocks base method.
func (m *MockClassCrawler) GetClassInfoForGraduateStudent(ctx context.Context, req model.GetClassInfoForGraduateStudentReq) (*model.GetClassInfoForGraduateStudentResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassInfoForGraduateStudent", ctx, req)
	ret0, _ := ret[0].(*model.GetClassInfoForGraduateStudentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassInfoForGraduateStudent indicates an expected call of GetClassInfoForGraduateStudent.
func (mr *MockClassCrawlerMockRecorder) GetClassInfoForGraduateStudent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassInfoForGraduateStudent", reflect.TypeOf((*MockClassCrawler)(nil).GetClassInfoForGraduateStudent), ctx, req)
}

// GetClassInfosForUndergraduate mocks base method.
func (m *MockClassCrawler) GetClassInfosForUndergraduate(ctx context.Context, req model.GetClassInfosForUndergraduateReq) (*model.GetClassInfosForUndergraduateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassInfosForUndergraduate", ctx, req)
	ret0, _ := ret[0].(*model.GetClassInfosForUndergraduateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassInfosForUndergraduate indicates an expected call of GetClassInfosForUndergraduate.
func (mr *MockClassCrawlerMockRecorder) GetClassInfosForUndergraduate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassInfosForUndergraduate", reflect.TypeOf((*MockClassCrawler)(nil).GetClassInfosForUndergraduate), ctx, req)
}

// MockClassRepoProxy is a mock of ClassRepoProxy interface.
type MockClassRepoProxy struct {
	ctrl     *gomock.Controller
	recorder *MockClassRepoProxyMockRecorder
}

// MockClassRepoProxyMockRecorder is the mock recorder for MockClassRepoProxy.
type MockClassRepoProxyMockRecorder struct {
	mock *MockClassRepoProxy
}

// NewMockClassRepoProxy creates a new mock instance.
func NewMockClassRepoProxy(ctrl *gomock.Controller) *MockClassRepoProxy {
	mock := &MockClassRepoProxy{ctrl: ctrl}
	mock.recorder = &MockClassRepoProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassRepoProxy) EXPECT() *MockClassRepoProxyMockRecorder {
	return m.recorder
}

// AddClass mocks base method.
func (m *MockClassRepoProxy) AddClass(ctx context.Context, req model.AddClassReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClass", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClass indicates an expected call of AddClass.
func (mr *MockClassRepoProxyMockRecorder) AddClass(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClass", reflect.TypeOf((*MockClassRepoProxy)(nil).AddClass), ctx, req)
}

// CheckClassIdIsInRecycledBin mocks base method.
func (m *MockClassRepoProxy) CheckClassIdIsInRecycledBin(ctx context.Context, req model.CheckClassIdIsInRecycledBinReq) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClassIdIsInRecycledBin", ctx, req)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckClassIdIsInRecycledBin indicates an expected call of CheckClassIdIsInRecycledBin.
func (mr *MockClassRepoProxyMockRecorder) CheckClassIdIsInRecycledBin(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClassIdIsInRecycledBin", reflect.TypeOf((*MockClassRepoProxy)(nil).CheckClassIdIsInRecycledBin), ctx, req)
}

// CheckSCIdsExist mocks base method.
func (m *MockClassRepoProxy) CheckSCIdsExist(ctx context.Context, req model.CheckSCIdsExistReq) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSCIdsExist", ctx, req)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckSCIdsExist indicates an expected call of CheckSCIdsExist.
func (mr *MockClassRepoProxyMockRecorder) CheckSCIdsExist(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSCIdsExist", reflect.TypeOf((*MockClassRepoProxy)(nil).CheckSCIdsExist), ctx, req)
}

// DeleteClass mocks base method.
func (m *MockClassRepoProxy) DeleteClass(ctx context.Context, req model.DeleteClassReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClass", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClass indicates an expected call of DeleteClass.
func (mr *MockClassRepoProxyMockRecorder) DeleteClass(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClass", reflect.TypeOf((*MockClassRepoProxy)(nil).DeleteClass), ctx, req)
}

// GetAllClasses mocks base method.
func (m *MockClassRepoProxy) GetAllClasses(ctx context.Context, req model.GetAllClassesReq) (*model.GetAllClassesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllClasses", ctx, req)
	ret0, _ := ret[0].(*model.GetAllClassesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllClasses indicates an expected call of GetAllClasses.
func (mr *MockClassRepoProxyMockRecorder) GetAllClasses(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllClasses", reflect.TypeOf((*MockClassRepoProxy)(nil).GetAllClasses), ctx, req)
}

// GetAllSchoolClassInfos mocks base method.
func (m *MockClassRepoProxy) GetAllSchoolClassInfos(ctx context.Context, req model.GetAllSchoolClassInfosReq) *model.GetAllSchoolClassInfosResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSchoolClassInfos", ctx, req)
	ret0, _ := ret[0].(*model.GetAllSchoolClassInfosResp)
	return ret0
}

// GetAllSchoolClassInfos indicates an expected call of GetAllSchoolClassInfos.
func (mr *MockClassRepoProxyMockRecorder) GetAllSchoolClassInfos(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSchoolClassInfos", reflect.TypeOf((*MockClassRepoProxy)(nil).GetAllSchoolClassInfos), ctx, req)
}

// GetRecycledIds mocks base method.
func (m *MockClassRepoProxy) GetRecycledIds(ctx context.Context, req model.GetRecycledIdsReq) (*model.GetRecycledIdsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecycledIds", ctx, req)
	ret0, _ := ret[0].(*model.GetRecycledIdsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecycledIds indicates an expected call of GetRecycledIds.
func (mr *MockClassRepoProxyMockRecorder) GetRecycledIds(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecycledIds", reflect.TypeOf((*MockClassRepoProxy)(nil).GetRecycledIds), ctx, req)
}

// GetSpecificClassInfo mocks base method.
func (m *MockClassRepoProxy) GetSpecificClassInfo(ctx context.Context, req model.GetSpecificClassInfoReq) (*model.GetSpecificClassInfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecificClassInfo", ctx, req)
	ret0, _ := ret[0].(*model.GetSpecificClassInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecificClassInfo indicates an expected call of GetSpecificClassInfo.
func (mr *MockClassRepoProxyMockRecorder) GetSpecificClassInfo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecificClassInfo", reflect.TypeOf((*MockClassRepoProxy)(nil).GetSpecificClassInfo), ctx, req)
}

// RecoverClassFromRecycledBin mocks base method.
func (m *MockClassRepoProxy) RecoverClassFromRecycledBin(ctx context.Context, req model.RecoverClassFromRecycleBinReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverClassFromRecycledBin", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverClassFromRecycledBin indicates an expected call of RecoverClassFromRecycledBin.
func (mr *MockClassRepoProxyMockRecorder) RecoverClassFromRecycledBin(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverClassFromRecycledBin", reflect.TypeOf((*MockClassRepoProxy)(nil).RecoverClassFromRecycledBin), ctx, req)
}

// SaveClasses mocks base method.
func (m *MockClassRepoProxy) SaveClasses(ctx context.Context, req model.SaveClassReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveClasses", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveClasses indicates an expected call of SaveClasses.
func (mr *MockClassRepoProxyMockRecorder) SaveClasses(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveClasses", reflect.TypeOf((*MockClassRepoProxy)(nil).SaveClasses), ctx, req)
}

// UpdateClass mocks base method.
func (m *MockClassRepoProxy) UpdateClass(ctx context.Context, req model.UpdateClassReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClass", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClass indicates an expected call of UpdateClass.
func (mr *MockClassRepoProxyMockRecorder) UpdateClass(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockClassRepoProxy)(nil).UpdateClass), ctx, req)
}

// MockJxbRepo is a mock of JxbRepo interface.
type MockJxbRepo struct {
	ctrl     *gomock.Controller
	recorder *MockJxbRepoMockRecorder
}

// MockJxbRepoMockRecorder is the mock recorder for MockJxbRepo.
type MockJxbRepoMockRecorder struct {
	mock *MockJxbRepo
}

// NewMockJxbRepo creates a new mock instance.
func NewMockJxbRepo(ctrl *gomock.Controller) *MockJxbRepo {
	mock := &MockJxbRepo{ctrl: ctrl}
	mock.recorder = &MockJxbRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJxbRepo) EXPECT() *MockJxbRepoMockRecorder {
	return m.recorder
}

// FindStuIdsByJxbId mocks base method.
func (m *MockJxbRepo) FindStuIdsByJxbId(ctx context.Context, jxbId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStuIdsByJxbId", ctx, jxbId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStuIdsByJxbId indicates an expected call of FindStuIdsByJxbId.
func (mr *MockJxbRepoMockRecorder) FindStuIdsByJxbId(ctx, jxbId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStuIdsByJxbId", reflect.TypeOf((*MockJxbRepo)(nil).FindStuIdsByJxbId), ctx, jxbId)
}

// SaveJxb mocks base method.
func (m *MockJxbRepo) SaveJxb(ctx context.Context, jxbId, stuId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveJxb", ctx, jxbId, stuId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveJxb indicates an expected call of SaveJxb.
func (mr *MockJxbRepoMockRecorder) SaveJxb(ctx, jxbId, stuId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveJxb", reflect.TypeOf((*MockJxbRepo)(nil).SaveJxb), ctx, jxbId, stuId)
}

// MockCCNUServiceProxy is a mock of CCNUServiceProxy interface.
type MockCCNUServiceProxy struct {
	ctrl     *gomock.Controller
	recorder *MockCCNUServiceProxyMockRecorder
}

// MockCCNUServiceProxyMockRecorder is the mock recorder for MockCCNUServiceProxy.
type MockCCNUServiceProxyMockRecorder struct {
	mock *MockCCNUServiceProxy
}

// NewMockCCNUServiceProxy creates a new mock instance.
func NewMockCCNUServiceProxy(ctrl *gomock.Controller) *MockCCNUServiceProxy {
	mock := &MockCCNUServiceProxy{ctrl: ctrl}
	mock.recorder = &MockCCNUServiceProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCCNUServiceProxy) EXPECT() *MockCCNUServiceProxyMockRecorder {
	return m.recorder
}

// GetCookie mocks base method.
func (m *MockCCNUServiceProxy) GetCookie(ctx context.Context, stu string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookie", ctx, stu)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookie indicates an expected call of GetCookie.
func (mr *MockCCNUServiceProxyMockRecorder) GetCookie(ctx, stu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockCCNUServiceProxy)(nil).GetCookie), ctx, stu)
}
