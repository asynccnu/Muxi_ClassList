// Code generated by MockGen. DO NOT EDIT.
// Source: ./classInfo.go

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	reflect "reflect"

	model "github.com/asynccnu/Muxi_ClassList/internal/biz/model"
	gomock "github.com/golang/mock/gomock"
)

// MockClassInfoDBRepo is a mock of ClassInfoDBRepo interface.
type MockClassInfoDBRepo struct {
	ctrl     *gomock.Controller
	recorder *MockClassInfoDBRepoMockRecorder
}

// MockClassInfoDBRepoMockRecorder is the mock recorder for MockClassInfoDBRepo.
type MockClassInfoDBRepoMockRecorder struct {
	mock *MockClassInfoDBRepo
}

// NewMockClassInfoDBRepo creates a new mock instance.
func NewMockClassInfoDBRepo(ctrl *gomock.Controller) *MockClassInfoDBRepo {
	mock := &MockClassInfoDBRepo{ctrl: ctrl}
	mock.recorder = &MockClassInfoDBRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassInfoDBRepo) EXPECT() *MockClassInfoDBRepoMockRecorder {
	return m.recorder
}

// AddClassInfoToDB mocks base method.
func (m *MockClassInfoDBRepo) AddClassInfoToDB(ctx context.Context, classInfo *model.ClassInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClassInfoToDB", ctx, classInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClassInfoToDB indicates an expected call of AddClassInfoToDB.
func (mr *MockClassInfoDBRepoMockRecorder) AddClassInfoToDB(ctx, classInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClassInfoToDB", reflect.TypeOf((*MockClassInfoDBRepo)(nil).AddClassInfoToDB), ctx, classInfo)
}

// DeleteClassInfoInDB mocks base method.
func (m *MockClassInfoDBRepo) DeleteClassInfoInDB(ctx context.Context, ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClassInfoInDB", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClassInfoInDB indicates an expected call of DeleteClassInfoInDB.
func (mr *MockClassInfoDBRepoMockRecorder) DeleteClassInfoInDB(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClassInfoInDB", reflect.TypeOf((*MockClassInfoDBRepo)(nil).DeleteClassInfoInDB), ctx, ID)
}

// GetAllClassInfos mocks base method.
func (m *MockClassInfoDBRepo) GetAllClassInfos(ctx context.Context, xnm, xqm string) ([]*model.ClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllClassInfos", ctx, xnm, xqm)
	ret0, _ := ret[0].([]*model.ClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllClassInfos indicates an expected call of GetAllClassInfos.
func (mr *MockClassInfoDBRepoMockRecorder) GetAllClassInfos(ctx, xnm, xqm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllClassInfos", reflect.TypeOf((*MockClassInfoDBRepo)(nil).GetAllClassInfos), ctx, xnm, xqm)
}

// GetClassInfoFromDB mocks base method.
func (m *MockClassInfoDBRepo) GetClassInfoFromDB(ctx context.Context, ID string) (*model.ClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassInfoFromDB", ctx, ID)
	ret0, _ := ret[0].(*model.ClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassInfoFromDB indicates an expected call of GetClassInfoFromDB.
func (mr *MockClassInfoDBRepoMockRecorder) GetClassInfoFromDB(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassInfoFromDB", reflect.TypeOf((*MockClassInfoDBRepo)(nil).GetClassInfoFromDB), ctx, ID)
}

// SaveClassInfosToDB mocks base method.
func (m *MockClassInfoDBRepo) SaveClassInfosToDB(ctx context.Context, classInfo []*model.ClassInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveClassInfosToDB", ctx, classInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveClassInfosToDB indicates an expected call of SaveClassInfosToDB.
func (mr *MockClassInfoDBRepoMockRecorder) SaveClassInfosToDB(ctx, classInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveClassInfosToDB", reflect.TypeOf((*MockClassInfoDBRepo)(nil).SaveClassInfosToDB), ctx, classInfo)
}

// MockClassInfoCacheRepo is a mock of ClassInfoCacheRepo interface.
type MockClassInfoCacheRepo struct {
	ctrl     *gomock.Controller
	recorder *MockClassInfoCacheRepoMockRecorder
}

// MockClassInfoCacheRepoMockRecorder is the mock recorder for MockClassInfoCacheRepo.
type MockClassInfoCacheRepoMockRecorder struct {
	mock *MockClassInfoCacheRepo
}

// NewMockClassInfoCacheRepo creates a new mock instance.
func NewMockClassInfoCacheRepo(ctrl *gomock.Controller) *MockClassInfoCacheRepo {
	mock := &MockClassInfoCacheRepo{ctrl: ctrl}
	mock.recorder = &MockClassInfoCacheRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassInfoCacheRepo) EXPECT() *MockClassInfoCacheRepoMockRecorder {
	return m.recorder
}

// AddClassInfoToCache mocks base method.
func (m *MockClassInfoCacheRepo) AddClassInfoToCache(ctx context.Context, classInfoKey, classInfosKey string, classInfo *model.ClassInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClassInfoToCache", ctx, classInfoKey, classInfosKey, classInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClassInfoToCache indicates an expected call of AddClassInfoToCache.
func (mr *MockClassInfoCacheRepoMockRecorder) AddClassInfoToCache(ctx, classInfoKey, classInfosKey, classInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClassInfoToCache", reflect.TypeOf((*MockClassInfoCacheRepo)(nil).AddClassInfoToCache), ctx, classInfoKey, classInfosKey, classInfo)
}

// DeleteClassInfoFromCache mocks base method.
func (m *MockClassInfoCacheRepo) DeleteClassInfoFromCache(ctx context.Context, deletedId, classInfosKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClassInfoFromCache", ctx, deletedId, classInfosKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClassInfoFromCache indicates an expected call of DeleteClassInfoFromCache.
func (mr *MockClassInfoCacheRepoMockRecorder) DeleteClassInfoFromCache(ctx, deletedId, classInfosKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClassInfoFromCache", reflect.TypeOf((*MockClassInfoCacheRepo)(nil).DeleteClassInfoFromCache), ctx, deletedId, classInfosKey)
}

// FixClassInfoInCache mocks base method.
func (m *MockClassInfoCacheRepo) FixClassInfoInCache(ctx context.Context, oldID, classInfoKey, classInfosKey string, classInfo *model.ClassInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FixClassInfoInCache", ctx, oldID, classInfoKey, classInfosKey, classInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// FixClassInfoInCache indicates an expected call of FixClassInfoInCache.
func (mr *MockClassInfoCacheRepoMockRecorder) FixClassInfoInCache(ctx, oldID, classInfoKey, classInfosKey, classInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FixClassInfoInCache", reflect.TypeOf((*MockClassInfoCacheRepo)(nil).FixClassInfoInCache), ctx, oldID, classInfoKey, classInfosKey, classInfo)
}

// GetClassInfoFromCache mocks base method.
func (m *MockClassInfoCacheRepo) GetClassInfoFromCache(ctx context.Context, key string) (*model.ClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassInfoFromCache", ctx, key)
	ret0, _ := ret[0].(*model.ClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassInfoFromCache indicates an expected call of GetClassInfoFromCache.
func (mr *MockClassInfoCacheRepoMockRecorder) GetClassInfoFromCache(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassInfoFromCache", reflect.TypeOf((*MockClassInfoCacheRepo)(nil).GetClassInfoFromCache), ctx, key)
}

// GetClassInfosFromCache mocks base method.
func (m *MockClassInfoCacheRepo) GetClassInfosFromCache(ctx context.Context, key string) ([]*model.ClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassInfosFromCache", ctx, key)
	ret0, _ := ret[0].([]*model.ClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassInfosFromCache indicates an expected call of GetClassInfosFromCache.
func (mr *MockClassInfoCacheRepoMockRecorder) GetClassInfosFromCache(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassInfosFromCache", reflect.TypeOf((*MockClassInfoCacheRepo)(nil).GetClassInfosFromCache), ctx, key)
}

// OnlyAddClassInfoToCache mocks base method.
func (m *MockClassInfoCacheRepo) OnlyAddClassInfoToCache(ctx context.Context, key string, classInfo *model.ClassInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnlyAddClassInfoToCache", ctx, key, classInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnlyAddClassInfoToCache indicates an expected call of OnlyAddClassInfoToCache.
func (mr *MockClassInfoCacheRepoMockRecorder) OnlyAddClassInfoToCache(ctx, key, classInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnlyAddClassInfoToCache", reflect.TypeOf((*MockClassInfoCacheRepo)(nil).OnlyAddClassInfoToCache), ctx, key, classInfo)
}

// OnlyAddClassInfosToCache mocks base method.
func (m *MockClassInfoCacheRepo) OnlyAddClassInfosToCache(ctx context.Context, key string, classInfos []*model.ClassInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnlyAddClassInfosToCache", ctx, key, classInfos)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnlyAddClassInfosToCache indicates an expected call of OnlyAddClassInfosToCache.
func (mr *MockClassInfoCacheRepoMockRecorder) OnlyAddClassInfosToCache(ctx, key, classInfos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnlyAddClassInfosToCache", reflect.TypeOf((*MockClassInfoCacheRepo)(nil).OnlyAddClassInfosToCache), ctx, key, classInfos)
}

// SaveManyClassInfosToCache mocks base method.
func (m *MockClassInfoCacheRepo) SaveManyClassInfosToCache(ctx context.Context, keys []string, classInfos []*model.ClassInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveManyClassInfosToCache", ctx, keys, classInfos)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveManyClassInfosToCache indicates an expected call of SaveManyClassInfosToCache.
func (mr *MockClassInfoCacheRepoMockRecorder) SaveManyClassInfosToCache(ctx, keys, classInfos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveManyClassInfosToCache", reflect.TypeOf((*MockClassInfoCacheRepo)(nil).SaveManyClassInfosToCache), ctx, keys, classInfos)
}
