// Code generated by MockGen. DO NOT EDIT.
// Source: ./studentAndCourse.go

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	reflect "reflect"

	biz "github.com/asynccnu/Muxi_ClassList/internal/biz"
	gomock "github.com/golang/mock/gomock"
)

// MockStudentAndCourseDBRepo is a mock of StudentAndCourseDBRepo interface.
type MockStudentAndCourseDBRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStudentAndCourseDBRepoMockRecorder
}

// MockStudentAndCourseDBRepoMockRecorder is the mock recorder for MockStudentAndCourseDBRepo.
type MockStudentAndCourseDBRepoMockRecorder struct {
	mock *MockStudentAndCourseDBRepo
}

// NewMockStudentAndCourseDBRepo creates a new mock instance.
func NewMockStudentAndCourseDBRepo(ctrl *gomock.Controller) *MockStudentAndCourseDBRepo {
	mock := &MockStudentAndCourseDBRepo{ctrl: ctrl}
	mock.recorder = &MockStudentAndCourseDBRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentAndCourseDBRepo) EXPECT() *MockStudentAndCourseDBRepoMockRecorder {
	return m.recorder
}

// CheckExists mocks base method.
func (m *MockStudentAndCourseDBRepo) CheckExists(ctx context.Context, xnm, xqm, stuId, classId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExists", ctx, xnm, xqm, stuId, classId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckExists indicates an expected call of CheckExists.
func (mr *MockStudentAndCourseDBRepoMockRecorder) CheckExists(ctx, xnm, xqm, stuId, classId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExists", reflect.TypeOf((*MockStudentAndCourseDBRepo)(nil).CheckExists), ctx, xnm, xqm, stuId, classId)
}

// DeleteStudentAndCourseInDB mocks base method.
func (m *MockStudentAndCourseDBRepo) DeleteStudentAndCourseInDB(ctx context.Context, ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudentAndCourseInDB", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStudentAndCourseInDB indicates an expected call of DeleteStudentAndCourseInDB.
func (mr *MockStudentAndCourseDBRepoMockRecorder) DeleteStudentAndCourseInDB(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudentAndCourseInDB", reflect.TypeOf((*MockStudentAndCourseDBRepo)(nil).DeleteStudentAndCourseInDB), ctx, ID)
}

// GetClassIDsFromSCInDB mocks base method.
func (m *MockStudentAndCourseDBRepo) GetClassIDsFromSCInDB(ctx context.Context, stuId, xnm, xqm string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassIDsFromSCInDB", ctx, stuId, xnm, xqm)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassIDsFromSCInDB indicates an expected call of GetClassIDsFromSCInDB.
func (mr *MockStudentAndCourseDBRepoMockRecorder) GetClassIDsFromSCInDB(ctx, stuId, xnm, xqm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassIDsFromSCInDB", reflect.TypeOf((*MockStudentAndCourseDBRepo)(nil).GetClassIDsFromSCInDB), ctx, stuId, xnm, xqm)
}

// SaveManyStudentAndCourseToDB mocks base method.
func (m *MockStudentAndCourseDBRepo) SaveManyStudentAndCourseToDB(ctx context.Context, scs []*biz.StudentCourse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveManyStudentAndCourseToDB", ctx, scs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveManyStudentAndCourseToDB indicates an expected call of SaveManyStudentAndCourseToDB.
func (mr *MockStudentAndCourseDBRepoMockRecorder) SaveManyStudentAndCourseToDB(ctx, scs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveManyStudentAndCourseToDB", reflect.TypeOf((*MockStudentAndCourseDBRepo)(nil).SaveManyStudentAndCourseToDB), ctx, scs)
}

// SaveStudentAndCourseToDB mocks base method.
func (m *MockStudentAndCourseDBRepo) SaveStudentAndCourseToDB(ctx context.Context, sc *biz.StudentCourse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStudentAndCourseToDB", ctx, sc)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStudentAndCourseToDB indicates an expected call of SaveStudentAndCourseToDB.
func (mr *MockStudentAndCourseDBRepoMockRecorder) SaveStudentAndCourseToDB(ctx, sc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStudentAndCourseToDB", reflect.TypeOf((*MockStudentAndCourseDBRepo)(nil).SaveStudentAndCourseToDB), ctx, sc)
}

// MockStudentAndCourseCacheRepo is a mock of StudentAndCourseCacheRepo interface.
type MockStudentAndCourseCacheRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStudentAndCourseCacheRepoMockRecorder
}

// MockStudentAndCourseCacheRepoMockRecorder is the mock recorder for MockStudentAndCourseCacheRepo.
type MockStudentAndCourseCacheRepoMockRecorder struct {
	mock *MockStudentAndCourseCacheRepo
}

// NewMockStudentAndCourseCacheRepo creates a new mock instance.
func NewMockStudentAndCourseCacheRepo(ctrl *gomock.Controller) *MockStudentAndCourseCacheRepo {
	mock := &MockStudentAndCourseCacheRepo{ctrl: ctrl}
	mock.recorder = &MockStudentAndCourseCacheRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentAndCourseCacheRepo) EXPECT() *MockStudentAndCourseCacheRepoMockRecorder {
	return m.recorder
}

// AddStudentAndCourseToCache mocks base method.
func (m *MockStudentAndCourseCacheRepo) AddStudentAndCourseToCache(ctx context.Context, key, ClassId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStudentAndCourseToCache", ctx, key, ClassId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStudentAndCourseToCache indicates an expected call of AddStudentAndCourseToCache.
func (mr *MockStudentAndCourseCacheRepoMockRecorder) AddStudentAndCourseToCache(ctx, key, ClassId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStudentAndCourseToCache", reflect.TypeOf((*MockStudentAndCourseCacheRepo)(nil).AddStudentAndCourseToCache), ctx, key, ClassId)
}

// CheckExists mocks base method.
func (m *MockStudentAndCourseCacheRepo) CheckExists(ctx context.Context, key, classId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExists", ctx, key, classId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExists indicates an expected call of CheckExists.
func (mr *MockStudentAndCourseCacheRepoMockRecorder) CheckExists(ctx, key, classId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExists", reflect.TypeOf((*MockStudentAndCourseCacheRepo)(nil).CheckExists), ctx, key, classId)
}

// DeleteStudentAndCourseFromCache mocks base method.
func (m *MockStudentAndCourseCacheRepo) DeleteStudentAndCourseFromCache(ctx context.Context, key, ClassId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudentAndCourseFromCache", ctx, key, ClassId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStudentAndCourseFromCache indicates an expected call of DeleteStudentAndCourseFromCache.
func (mr *MockStudentAndCourseCacheRepoMockRecorder) DeleteStudentAndCourseFromCache(ctx, key, ClassId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudentAndCourseFromCache", reflect.TypeOf((*MockStudentAndCourseCacheRepo)(nil).DeleteStudentAndCourseFromCache), ctx, key, ClassId)
}

// GetClassIdsFromCache mocks base method.
func (m *MockStudentAndCourseCacheRepo) GetClassIdsFromCache(ctx context.Context, key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassIdsFromCache", ctx, key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassIdsFromCache indicates an expected call of GetClassIdsFromCache.
func (mr *MockStudentAndCourseCacheRepoMockRecorder) GetClassIdsFromCache(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassIdsFromCache", reflect.TypeOf((*MockStudentAndCourseCacheRepo)(nil).GetClassIdsFromCache), ctx, key)
}

// SaveManyStudentAndCourseToCache mocks base method.
func (m *MockStudentAndCourseCacheRepo) SaveManyStudentAndCourseToCache(ctx context.Context, key string, classIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveManyStudentAndCourseToCache", ctx, key, classIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveManyStudentAndCourseToCache indicates an expected call of SaveManyStudentAndCourseToCache.
func (mr *MockStudentAndCourseCacheRepoMockRecorder) SaveManyStudentAndCourseToCache(ctx, key, classIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveManyStudentAndCourseToCache", reflect.TypeOf((*MockStudentAndCourseCacheRepo)(nil).SaveManyStudentAndCourseToCache), ctx, key, classIds)
}
