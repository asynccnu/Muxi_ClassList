// Code generated by MockGen. DO NOT EDIT.
// Source: ./classer.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	model "github.com/asynccnu/Muxi_ClassList/internal/biz/model"
	gomock "github.com/golang/mock/gomock"
)

// MockClassCtrl is a mock of ClassCtrl interface.
type MockClassCtrl struct {
	ctrl     *gomock.Controller
	recorder *MockClassCtrlMockRecorder
}

// MockClassCtrlMockRecorder is the mock recorder for MockClassCtrl.
type MockClassCtrlMockRecorder struct {
	mock *MockClassCtrl
}

// NewMockClassCtrl creates a new mock instance.
func NewMockClassCtrl(ctrl *gomock.Controller) *MockClassCtrl {
	mock := &MockClassCtrl{ctrl: ctrl}
	mock.recorder = &MockClassCtrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassCtrl) EXPECT() *MockClassCtrlMockRecorder {
	return m.recorder
}

// AddClass mocks base method.
func (m *MockClassCtrl) AddClass(ctx context.Context, stuId string, info *model.ClassInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClass", ctx, stuId, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClass indicates an expected call of AddClass.
func (mr *MockClassCtrlMockRecorder) AddClass(ctx, stuId, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClass", reflect.TypeOf((*MockClassCtrl)(nil).AddClass), ctx, stuId, info)
}

// CheckSCIdsExist mocks base method.
func (m *MockClassCtrl) CheckSCIdsExist(ctx context.Context, stuId, classId, xnm, xqm string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSCIdsExist", ctx, stuId, classId, xnm, xqm)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckSCIdsExist indicates an expected call of CheckSCIdsExist.
func (mr *MockClassCtrlMockRecorder) CheckSCIdsExist(ctx, stuId, classId, xnm, xqm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSCIdsExist", reflect.TypeOf((*MockClassCtrl)(nil).CheckSCIdsExist), ctx, stuId, classId, xnm, xqm)
}

// DeleteClass mocks base method.
func (m *MockClassCtrl) DeleteClass(ctx context.Context, classId, stuId, xnm, xqm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClass", ctx, classId, stuId, xnm, xqm)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClass indicates an expected call of DeleteClass.
func (mr *MockClassCtrlMockRecorder) DeleteClass(ctx, classId, stuId, xnm, xqm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClass", reflect.TypeOf((*MockClassCtrl)(nil).DeleteClass), ctx, classId, stuId, xnm, xqm)
}

// GetAllSchoolClassInfosToOtherService mocks base method.
func (m *MockClassCtrl) GetAllSchoolClassInfosToOtherService(ctx context.Context, xnm, xqm string) []*model.ClassInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSchoolClassInfosToOtherService", ctx, xnm, xqm)
	ret0, _ := ret[0].([]*model.ClassInfo)
	return ret0
}

// GetAllSchoolClassInfosToOtherService indicates an expected call of GetAllSchoolClassInfosToOtherService.
func (mr *MockClassCtrlMockRecorder) GetAllSchoolClassInfosToOtherService(ctx, xnm, xqm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSchoolClassInfosToOtherService", reflect.TypeOf((*MockClassCtrl)(nil).GetAllSchoolClassInfosToOtherService), ctx, xnm, xqm)
}

// GetClasses mocks base method.
func (m *MockClassCtrl) GetClasses(ctx context.Context, StuId string, week int64, xnm, xqm string) ([]*model.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClasses", ctx, StuId, week, xnm, xqm)
	ret0, _ := ret[0].([]*model.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClasses indicates an expected call of GetClasses.
func (mr *MockClassCtrlMockRecorder) GetClasses(ctx, StuId, week, xnm, xqm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClasses", reflect.TypeOf((*MockClassCtrl)(nil).GetClasses), ctx, StuId, week, xnm, xqm)
}

// GetRecycledClassInfos mocks base method.
func (m *MockClassCtrl) GetRecycledClassInfos(ctx context.Context, stuId, xnm, xqm string) ([]*model.ClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecycledClassInfos", ctx, stuId, xnm, xqm)
	ret0, _ := ret[0].([]*model.ClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecycledClassInfos indicates an expected call of GetRecycledClassInfos.
func (mr *MockClassCtrlMockRecorder) GetRecycledClassInfos(ctx, stuId, xnm, xqm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecycledClassInfos", reflect.TypeOf((*MockClassCtrl)(nil).GetRecycledClassInfos), ctx, stuId, xnm, xqm)
}

// GetStuIdsByJxbId mocks base method.
func (m *MockClassCtrl) GetStuIdsByJxbId(ctx context.Context, jxbId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStuIdsByJxbId", ctx, jxbId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStuIdsByJxbId indicates an expected call of GetStuIdsByJxbId.
func (mr *MockClassCtrlMockRecorder) GetStuIdsByJxbId(ctx, jxbId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStuIdsByJxbId", reflect.TypeOf((*MockClassCtrl)(nil).GetStuIdsByJxbId), ctx, jxbId)
}

// RecoverClassInfo mocks base method.
func (m *MockClassCtrl) RecoverClassInfo(ctx context.Context, stuId, xnm, xqm, classId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverClassInfo", ctx, stuId, xnm, xqm, classId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverClassInfo indicates an expected call of RecoverClassInfo.
func (mr *MockClassCtrlMockRecorder) RecoverClassInfo(ctx, stuId, xnm, xqm, classId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverClassInfo", reflect.TypeOf((*MockClassCtrl)(nil).RecoverClassInfo), ctx, stuId, xnm, xqm, classId)
}

// SearchClass mocks base method.
func (m *MockClassCtrl) SearchClass(ctx context.Context, classId string) (*model.ClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchClass", ctx, classId)
	ret0, _ := ret[0].(*model.ClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchClass indicates an expected call of SearchClass.
func (mr *MockClassCtrlMockRecorder) SearchClass(ctx, classId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchClass", reflect.TypeOf((*MockClassCtrl)(nil).SearchClass), ctx, classId)
}

// UpdateClass mocks base method.
func (m *MockClassCtrl) UpdateClass(ctx context.Context, newClassInfo *model.ClassInfo, newSc *model.StudentCourse, stuId, oldClassId, xnm, xqm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClass", ctx, newClassInfo, newSc, stuId, oldClassId, xnm, xqm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClass indicates an expected call of UpdateClass.
func (mr *MockClassCtrlMockRecorder) UpdateClass(ctx, newClassInfo, newSc, stuId, oldClassId, xnm, xqm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockClassCtrl)(nil).UpdateClass), ctx, newClassInfo, newSc, stuId, oldClassId, xnm, xqm)
}
