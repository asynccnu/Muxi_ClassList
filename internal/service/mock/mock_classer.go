// Code generated by MockGen. DO NOT EDIT.
// Source: ./classer.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	biz "class/internal/biz"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClassCtrl is a mock of ClassCtrl interface.
type MockClassCtrl struct {
	ctrl     *gomock.Controller
	recorder *MockClassCtrlMockRecorder
}

// MockClassCtrlMockRecorder is the mock recorder for MockClassCtrl.
type MockClassCtrlMockRecorder struct {
	mock *MockClassCtrl
}

// NewMockClassCtrl creates a new mock instance.
func NewMockClassCtrl(ctrl *gomock.Controller) *MockClassCtrl {
	mock := &MockClassCtrl{ctrl: ctrl}
	mock.recorder = &MockClassCtrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassCtrl) EXPECT() *MockClassCtrlMockRecorder {
	return m.recorder
}

// AddClass mocks base method.
func (m *MockClassCtrl) AddClass(ctx context.Context, stuId string, info *biz.ClassInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClass", ctx, stuId, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClass indicates an expected call of AddClass.
func (mr *MockClassCtrlMockRecorder) AddClass(ctx, stuId, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClass", reflect.TypeOf((*MockClassCtrl)(nil).AddClass), ctx, stuId, info)
}

// DeleteClass mocks base method.
func (m *MockClassCtrl) DeleteClass(ctx context.Context, classId, stuId, xnm, xqm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClass", ctx, classId, stuId, xnm, xqm)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClass indicates an expected call of DeleteClass.
func (mr *MockClassCtrlMockRecorder) DeleteClass(ctx, classId, stuId, xnm, xqm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClass", reflect.TypeOf((*MockClassCtrl)(nil).DeleteClass), ctx, classId, stuId, xnm, xqm)
}

// GetClasses mocks base method.
func (m *MockClassCtrl) GetClasses(ctx context.Context, StuId string, week int64, xnm, xqm, cookie string) ([]*biz.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClasses", ctx, StuId, week, xnm, xqm, cookie)
	ret0, _ := ret[0].([]*biz.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClasses indicates an expected call of GetClasses.
func (mr *MockClassCtrlMockRecorder) GetClasses(ctx, StuId, week, xnm, xqm, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClasses", reflect.TypeOf((*MockClassCtrl)(nil).GetClasses), ctx, StuId, week, xnm, xqm, cookie)
}

// SearchClass mocks base method.
func (m *MockClassCtrl) SearchClass(ctx context.Context, classId string) (*biz.ClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchClass", ctx, classId)
	ret0, _ := ret[0].(*biz.ClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchClass indicates an expected call of SearchClass.
func (mr *MockClassCtrlMockRecorder) SearchClass(ctx, classId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchClass", reflect.TypeOf((*MockClassCtrl)(nil).SearchClass), ctx, classId)
}

// UpdateClass mocks base method.
func (m *MockClassCtrl) UpdateClass(ctx context.Context, newClassInfo *biz.ClassInfo, newSc *biz.StudentCourse, stuId, oldClassId, xnm, xqm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClass", ctx, newClassInfo, newSc, stuId, oldClassId, xnm, xqm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClass indicates an expected call of UpdateClass.
func (mr *MockClassCtrlMockRecorder) UpdateClass(ctx, newClassInfo, newSc, stuId, oldClassId, xnm, xqm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockClassCtrl)(nil).UpdateClass), ctx, newClassInfo, newSc, stuId, oldClassId, xnm, xqm)
}

// MockCCNUServiceProxy is a mock of CCNUServiceProxy interface.
type MockCCNUServiceProxy struct {
	ctrl     *gomock.Controller
	recorder *MockCCNUServiceProxyMockRecorder
}

// MockCCNUServiceProxyMockRecorder is the mock recorder for MockCCNUServiceProxy.
type MockCCNUServiceProxyMockRecorder struct {
	mock *MockCCNUServiceProxy
}

// NewMockCCNUServiceProxy creates a new mock instance.
func NewMockCCNUServiceProxy(ctrl *gomock.Controller) *MockCCNUServiceProxy {
	mock := &MockCCNUServiceProxy{ctrl: ctrl}
	mock.recorder = &MockCCNUServiceProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCCNUServiceProxy) EXPECT() *MockCCNUServiceProxyMockRecorder {
	return m.recorder
}

// GetCookie mocks base method.
func (m *MockCCNUServiceProxy) GetCookie(ctx context.Context, stu string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookie", ctx, stu)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookie indicates an expected call of GetCookie.
func (mr *MockCCNUServiceProxyMockRecorder) GetCookie(ctx, stu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockCCNUServiceProxy)(nil).GetCookie), ctx, stu)
}
