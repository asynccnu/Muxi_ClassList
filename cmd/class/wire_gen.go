// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"class/internal/biz"
	"class/internal/client"
	"class/internal/conf"
	"class/internal/data"
	"class/internal/logPrinter"
	"class/internal/pkg/crawler"
	"class/internal/registry"
	"class/internal/server"
	"class/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, confRegistry *conf.Registry, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData)
	dataData, cleanup, err := data.NewData(confData, db, logger)
	if err != nil {
		return nil, nil, err
	}
	logerPrinter := logPrinter.NewLogger(logger)
	classInfoDBRepo := data.NewClassInfoDBRepo(dataData, logerPrinter)
	redisClient := data.NewRedisDB(confData)
	classInfoCacheRepo := data.NewClassInfoCacheRepo(redisClient, logerPrinter)
	classInfoRepo := biz.NewClassInfoRepo(classInfoDBRepo, classInfoCacheRepo)
	transaction := data.NewTransaction(dataData)
	studentAndCourseDBRepo := data.NewStudentAndCourseDBRepo(dataData, logerPrinter)
	studentAndCourseCacheRepo := data.NewStudentAndCourseCacheRepo(redisClient, logerPrinter)
	studentAndCourseRepo := biz.NewStudentAndCourseRepo(studentAndCourseDBRepo, studentAndCourseCacheRepo)
	classRepo := biz.NewClassRepo(classInfoRepo, transaction, studentAndCourseRepo, logerPrinter)
	crawlerCrawler := crawler.NewClassCrawler(logerPrinter)
	classUsercase := biz.NewClassUsercase(classRepo, crawlerCrawler, logerPrinter)
	etcdRegistry := registry.NewRegistrarServer(confRegistry, logger)
	ccnuServiceClient, err := client.NewClient(etcdRegistry, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	ccnuService := client.NewCCNUService(ccnuServiceClient)
	classerService := service.NewClasserService(classUsercase, ccnuService, logerPrinter)
	grpcServer := server.NewGRPCServer(confServer, classerService, logger)
	httpServer := server.NewHTTPServer(confServer, classerService, logger)
	app := newApp(logger, grpcServer, httpServer, etcdRegistry)
	return app, func() {
		cleanup()
	}, nil
}
